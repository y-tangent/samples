@startuml

' openplanner
package openplanner <<Node>> {
  class PlannerH
  note bottom : 軌道生成機能を持つ
  class LocalPlannerH
  class BehaviorStateMachine {
    {abstract} BehaviorStateMachine* GetNextState()
  }
  class ForwardState
  class FollowState
  class BehaviorState
  note bottom: INITIAL_STATE, WAITING_STATE,\nFORWARD_STATE, STOPPING_STATE,\nEMERGENCY_STATE,TRAFFIC_LIGHT_STOP_STATE,\nTRAFFIC_LIGHT_WAIT_STATE, STOP_SIGN_STOP_STATE,\nSTOP_SIGN_WAIT_STATE, FOLLOW_STATE,\nLANE_CHANGE_STATE, OBSTACLE_AVOIDANCE_STATE,\nGOAL_STATE, FINISH_STATE
  class TrajectoryCosts
  note right : DetectedObject を入力として判断する
  class TrajectoryCost {
    int index;
    int relative_index;
    double closest_obj_velocity;
    double distance_from_center;
    double priority_cost; //0 to 1
    double transition_cost; // 0 to 1
    double closest_obj_cost; // 0 to 1
    double cost;
    double closest_obj_distance;

    int lane_index;
    double lane_change_cost;
    double lateral_cost;
    double longitudinal_cost;
    bool bBlocked;
    std::vector<std::pair<int, double> > lateral_costs;
  }
  class TrajectoryFollower
}

LocalPlannerH o-- BehaviorStateMachine
LocalPlannerH *-- TrajectoryCosts
LocalPlannerH --> PlannerH
BehaviorStateMachine <|-- ForwardState
BehaviorStateMachine <|-- FollowState
TrajectoryCosts "1" *-- "*" TrajectoryCost

' dp_planner
package dp_planner <<Node>> {
class PlannerX
}

PlannerX *-- LocalPlannerH
PlannerX *-- BehaviorState

' ff_waypoint_follower
package ff_waypoint_follower <<Node>> {
  class FFSteerControl
}

FFSteerControl *-- LocalPlannerH
FFSteerControl *-- TrajectoryFollower
FFSteerControl *-- BehaviorState

@enduml
